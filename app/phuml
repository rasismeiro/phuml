#!/usr/bin/env php
<?php

require_once( dirname( __FILE__ ) . '/../config/config.php' );

function showHeader() 
{
    echo <<<HEADER
phUML Version 0.2 (Jakob Westhoff <jakob@php.net>)

HEADER;
}

function showUsage() 
{
    echo <<<USAGE
Usage: phuml [-h|-l] [OPTIONS] <DIRECTORY> <PROCESSOR> [PROCESSOR OPTIONS] ... <OUTFILE>

Commands:
    -h      Display this help text
    -l      List all available processors

Options: 
    -r      Scan given directorie recursively

Example:
    phuml -r ./ -graphviz -createAssociations false -neato out.png

    This example will scan the current directory recursively for php files.
    Send them to the "dot" processor which will process them with the option
    "createAssociations" set to false. After that it will be send to the neato
    processor and saved to the file out.png


USAGE;
}

function showProcessorList() 
{
    echo "The following processors are available:\n\n";
    foreach( plProcessor::getProcessors() as $processor ) 
    {
        echo "* Processor: ", $processor, "\n";
        echo "  - Options:", "\n";
        
        $class = 'pl' . $processor . 'Processor';
        $p = new $class();
        $o = $p->options;

        if ( count( $o->getOptions() ) === 0 ) 
        {
            echo "    This processor does not have any options.", "\n\n";
            continue;
        }
        
        foreach ( $o->getOptions() as $option ) 
        {
            echo "    ", $option, ' (', getOptionTypeRepresentation( $o->getOptionType( $option ) ), '):', "\n";
            
            // Get the description as an word wrapped array to add the padding
            $description = explode( "\n", wordwrap( $o->getOptionDescription( $option ), 73, "\n", true ) );
            foreach( $description as $descriptionLine ) 
            {
                echo "      ", $descriptionLine, "\n";
            }
            echo "\n";
        }
    }
}

function getOptionTypeRepresentation( $type ) 
{
    switch ( $type ) 
    {
        case plProcessorOptions::BOOL:
            return 'boolean';
        break;
        case plProcessorOptions::STRING:
            return 'string';
        break;
        case plProcessorOptions::DECIMAL:
            return 'decimal';
        break;
        default:
            return 'unknown type';
    }
}

function updateArguments( $count ) 
{
    global $argc, $argv;

    $argv = array_slice( $argv, $count );
    $argc = count( $argv );
}

function cmdActions() 
{
    global $argc, $argv;

    if ( strtolower( $argv[0] ) === '-h' ) 
    {
        showUsage();
        exit( 1 );
    }
    else if ( strtolower( $argv[0] ) === '-l' ) 
    {
        showProcessorList();
        exit( 0 );
    }
}

function cmdOptions() 
{
    global $argc, $argv;    
    global $recursive;

    if ( strtolower( $argv[0] ) === '-r' ) 
    {
        $recursive = true;
        updateArguments( 1 );
    }
}

function cmdDirOrFile() 
{
    global $argc, $argv;
    global $phuml, $recursive;

    if ( is_dir( $argv[0] ) ) 
    {
        $phuml->addDirectory( $argv[0], 'php', $recursive );
        updateArguments( 1 );
    }
    else
    {
        showUsage();
        exit( 1 );
    }
}

function cmdProcessor() 
{
    global $argc, $argv;
    global $phuml;

    if ( substr( $argv[0], 0, 1 ) !== '-' ) 
    {
        showUsage();
        exit( 1 );
    }
    
    // We do not need to check for correct options here, because the option
    // will throw an exception if there is something wrong

    $processor = plProcessor::factory( 
        substr( $argv[0], 1 ) 
    );

    updateArguments( 1 );

    while( $argc > 1 && !in_array( ucfirst( $option = substr( $argv[0], 1 ) ), plProcessor::getProcessors() ) ) 
    {        
        $processor->options->$option = $argv[1];
        updateArguments( 2 );
    }

    $phuml->addProcessor( $processor );
}

function cmdOutFile() 
{
    global $argc, $argv;
    global $outfile;

    $outfile = $argv[0];
    updateArguments( 1 );
}

showHeader();

// The absolute minimum of parameters is 2
if ( $argc < 2 ) 
{
    showUsage();
    exit( 1 );
}

$recursive = false;
$outfile   = 'out';

$phuml            = new plPhuml();
$phuml->generator = plStructureGenerator::factory( 'tokenparser' );

// Remove the application name
updateArguments( 1 );

try 
{
    cmdActions();
    cmdOptions();
    cmdDirOrFile();
    while( $argc > 1 ) 
    {
        cmdProcessor();
    }
    cmdOutFile();

    echo '[|] Running... (This may take some time)', "\n";

    $phuml->generate( $outfile );
}
catch ( Exception $e ) 
{
    echo 'A fatal error occured during the process:', "\n";
    echo $e->getMessage(), "\n";
}

?>
